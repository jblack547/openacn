<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter>
  <title>Guidance for Developers</title>
  <section>
    <title>Introduction</title>
    <para>This chapter is aimed at developers contributing code to
    OpenACN.</para>
    <para>If all you are doing is downloading the source and doing a private
    build, you can do whatever you like subject to license terms. However, If
    you make inprovements, or port the code to new platforms, we would of course
    like you to feed your changes back to us.</para>
  </section>
  <section>
    <title>Coding Conventions</title>
    <note>
      <title>Acknowledgement</title>
      <para>Many of these guidelines originated in the Wireshark Code Style
      guidelines (README.developer in the Wireshark sources)</para>
    </note>
    <section>
      <title>Portability</title>
      <para>OpenACN must compile on a wide variety of platforms and
      compilers.</para>
      <section>
        <title>Source Language</title>
        <para>Main sources must be in ANSI C. Do not use other dialects of C or
        compiler extensions unless there is a serious efficiency gain to be made
        in the resulting code, and then make sure the relevant code enclosed
        with an <code>#if</code> statement and an ANSI compatible alternative is
        also provided. Also comment what you have done and why.</para>
      </section>
      <section>
        <title>Use of C++</title>
        <para>Some target systems may be built using C++ development systems and
        require some code to be wrapped in C++ constructions. You can make sure
        that this does not break C platforms by not introducing *.cpp files into
        the source tree, except where they only contain code entirely specific
        to that platform. If necessary create a wrapper file which
        <computeroutput><code>#include</code></computeroutput>s the normal C
        file.</para>
        <para>It is acceptable to include some code within <code>#ifdef
        __cplusplus</code> sections within sources, provided that this does not
        break other platforms.</para>
      </section>
      <section>
        <title>Compiler Differences</title>
        <para>Do not rely on knowledge of the architecture and compiler you are
        using since your code will then not fit another compiler or target
        architecture. The following guidelines should prevent some common
        compiler incompatibilities.</para>
        <itemizedlist>
          <listitem>
            <para>Do not use C++-style comments (comments beginning with "//"
            and running to the end of the line).</para>
          </listitem>
          <listitem>
            <para>Do not initialize variables in their declaration with
            non-constant values e.g. don't use this:</para>
            <programlisting>int i = somearray[2];</programlisting>
          </listitem>
          <listitem>
            <para>Do not declare variables in the middle of executable code.
            Variables should be declared outside a function, or at the beginning
            of a function or compound statement. This is OK:</para>
            <programlisting>{
   int i;    /* declare i here */
   while (x) {
      ...
   }
   for (i = 0; i &lt; 10; i++) {
      ...
   }
}</programlisting>
            <para>This is not:</para>
            <programlisting>{
   while (x) {
      ...
   }
   int i;    /* don't declare i here */
   for (i = 0; i &lt; 10; i++) {
      ...
   }
}</programlisting>
            <para>Nor is this:</para>
            <programlisting>{
   while (x) {
      ...
   }
   for (int i = 0; i &lt; 10; i++) {    /* C++ style - don't do it */
      ...
   }
}</programlisting>
          </listitem>
          <listitem>
            <para>Do not use zero length arrays.</para>
          </listitem>
          <listitem>
            <para>Do not use anonymous unions. Example:</para>
            <programlisting>typedef struct foo {
   int foo;
   union {
      long foo_l;
      short foo_s;
   } u;  /* must have a name here */
} foo_t;</programlisting>
          </listitem>
          <listitem>
            <para>Don't use a label without a statement following it &#8211; if
            necessary insert a null statement. For example:</para>
            <programlisting>   if (result == BAD_THING) goto abort;
   ...
abort:
   ;  /* a null statement. Without the semicolon compilers may barf */
}</programlisting>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Data sizes and formats</title>
        <section>
          <title>Fixed size integer types</title>
          <para>types.h defines fixed size types. It is a wrapper for
          arch-xxx/types.h which must be re-written for each different
          architecture or compiler to ensure that the right sizes are
          generated.</para>
          <para>If you need a fixed size integer use the types defined in
          types.h. Make no assumptions about the size of char, short, int, long
          etc. Do not define or redefine new fixed size types which duplicate
          those in type.h. The only exception is in order to wrap a piece of
          code which has been imported in its entirety from elsewhere.</para>
          <para>If your data item does not need to be of a fixed length for good
          protocol reasons use a standard C type. This allows the compiler to
          pick its most efficient type. For example if you just want to count
          from 0 to 100 use an int for the counter; similarly use "char" (or
          "unsigned char") type for text strings (or "wchar" type for unicode).
          Note: ANSI C <emphasis>does</emphasis> specify minimum sizes for
          integer types and requires a limits.h header file, so standard types
          are not totally unconstrained.</para>
          <para>For example, a sequence number is defined by the SDT standard to
          be unsigned 32-bits whereas a simple loop counter should be left to
          the compiler.</para>
          <programlisting>uint32_t seqno;
int count;</programlisting>
        </section>
      </section>
      <section>
        <title>Byte Ordering</title>
        <para>As with any network code, be very careful about byte ordering. ACN
        is a network protocol and its byte ordering differs from native order on
        many processors. Use the functions/macros htons(), htonl() etc. There
        are also a set of functions defined in marshal.h for packing data items
        into buffers and unpacking them again. Remember network byte order is
        big-endian throughout ACN and IP. Host byte order varies so on some
        hosts ntohl() etc will be null functions. They must nevertheless be
        used.</para>
      </section>
      <section>
        <title>C Library functions</title>
        <para>ANSI C defines a wide range of standard library functions but
        these are aimed at large systems. You cannot be sure that any of these
        will be available for embedded platforms or that they will conform well
        to arcane niceties of the specification.</para>
        <section>
          <title>malloc, realloc, free</title>
          <para>These assume dynamic memory allocation is available which may
          well not be the case. Where available, dynamic memory management may
          be very simplistic - realloc() poses special problems and may not be
          available - DO NOT ASSUME realloc() to a smaller size will not modify
          the pointer to the start of the memory block. Code which uses these
          functions should be isolated behind an API which allows alternative
          memory management strategies to be used. See Root Layer memory
          handling for examples.</para>
        </section>
        <section>
          <title>printf etc.</title>
          <para>Use syslog() for diagnostic messages. This can be ported to
          different environments or simply overridden with a NULL macro if no
          facilities exist.</para>
        </section>
        <section>
          <title>sprintf, sscanf etc.</title>
          <para>These may not be available on small platforms or may require a
          relatively huge amount of resource - try not to use them.</para>
        </section>
        <section>
          <title>bzero, bcopy, bcmp</title>
          <para>Do not use these.</para>
        </section>
        <section>
          <title>memset, memcpy, memmove, memcmp</title>
          <para>These can be used. They are built in to many compilers and if
          the worst comes to the worst, they are fairly easy to write from
          scratch if necessary.</para>
        </section>
      </section>
    </section>
    <section>
      <title>Source formatting</title>
      <section>
        <title>Functions</title>
        <section>
          <title>Definitions</title>
          <itemizedlist>
            <listitem>
              <para>In function definitions place the return type on a separate
              line so the function name begins in column 1 (there are source
              management and analysis tools which rely on this - it also aids
              searching for a function definition) and put opening/closing
              braces on their own line. e.g.</para>
              <programlisting>void 
my_function_foo(int x, int y) 
{
   ...
}</programlisting>
              <para>Where the argument declarations get too long to go on one
              line place them one per line like this:</para>
              <programlisting>int
my_long_function(
   int firstarg,
   const struct struct_with_a_long_tag_name *silly_ptr,
   long int anotherarg,
   unsigned char andanother
)
{
   ...
}</programlisting>
            </listitem>
            <listitem>
              <para>Include at least one line of '*'s at least 70 chars long
              before each function:</para>
              <programlisting>/*********************************************************************/
void 
my_function_foo(...</programlisting>
            </listitem>
          </itemizedlist>
        </section>
        <section>
          <title>Prototypes</title>
          <itemizedlist>
            <listitem>
              <para>Prototypes should be provided in the header file unless the
              function is defined as "static".</para>
            </listitem>
            <listitem>
              <para>Prototypes (unlike the function block) should include the
              return type and function name on the same line. As with the
              definition, either include all arguments on the same line or
              divide them one per line.</para>
            </listitem>
            <listitem>
              <para>Prototypes for functions with no parameters should
              explicitly state void:</para>
              <programlisting>void my_void_parameter_function(void)</programlisting>
            </listitem>
          </itemizedlist>
        </section>
        <section>
          <title>Comments</title>
          <para>Put comments documenting what a function does in the source
          file, not the header file.</para>
        </section>
      </section>
      <section>
        <title>Spaces</title>
        <itemizedlist>
          <listitem>
            <para>Do not put spaces between a function name and the opening
            bracket.</para>
          </listitem>
          <listitem>
            <para>Where multiple terms are separated by commas (e.g. with
            multiple function arguments) put a space (or line break if lines are
            too long) after each comma.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Tabs and Indentation</title>
        <para>Style relating to tabs vs spaces, tab width, placing of opening
        braces of blocks, alignment of case labels and other matters engenders
        strong personal preferences and rigid enforcement is doomed to failure.
        However, wild inconsistency within a source is unforgivable.</para>
        <itemizedlist>
          <listitem>
            <para>If editing an existing source file, respect the conventions in
            it and do not introduce new ones. If generating new sources attempt
            to keep close to the style of acssociated sources and *be
            consistent*.</para>
          </listitem>
          <listitem>
            <para>Conventions which mix tabs and spaces are strongly
            discouraged</para>
          </listitem>
          <listitem>
            <para>Tab spacing convention should be declared near the top of a
            file using this syntax:</para>
            <programlisting>#tabs=4</programlisting>
            <para>or if you use spaces exclusively and no tabs:</para>
            <programlisting>#tabs=none</programlisting>
            <para>This line should begin at the start of the line and should
            contain no other text. Hide it in a comment if necessary. Many
            editors can use this (e.g. via a macro) to set up tabs
            automatically.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Use of Curly Braces</title>
        <para>where an if or else is followed by a single statement, it does not
        technically need to be placed in braces (compound statement) but unless
        the statement is terse and the meaning abundantly clear, braces usually
        help the reader:</para>
        <programlisting>   if (x)
      do_x();
   else
      do_not_x();</programlisting>
        <para>is OK, but this is not:</para>
        <programlisting>    if ((var = testA(param1, arg2)) == 73
        &amp;&amp; some_variable &lt;= 6
        &amp;&amp; (test() == TRUE || end_of_the_world()))
        do_the_right_thing(with_arguiment);
    else do_something_else();</programlisting>
      </section>
      <section>
        <title>Initialization</title>
        <para>The C standard specifies that static and global variables can be
        assumed to be zero when program is started. However, if your program
        relies on a particular variable being initialized to zero then an
        explicit initialization emphasizes the fact. Note also that in some
        deeply embedded systems initialization cannot be relied on.</para>
      </section>
      <section>
        <title>Characters and Encoding</title>
        <para>Code in ASCII with English comments. Where other characters are
        essential use UTF-8. (This does not apply to XML used in DDL which uses
        other tools and where unicode is the norm).</para>
      </section>
    </section>
    <section>
      <title>Names</title>
      <itemizedlist>
        <listitem>
          <para>Use <code>underscore_convention</code> rather than the
          <code>InterCapConvention</code> for function names and
          variables.</para>
        </listitem>
        <listitem>
          <para>Follow these standard naming suffixes:</para>
          <variablelist>
            <varlistentry>
              <term>_init</term>
              <listitem>
                <para>Initialization routines. It is expected that these are
                called once.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>_start</term>
              <listitem>
                <para>Start a service</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>_stop</term>
              <listitem>
                <para>Stop a service</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Warnings</title>
      <para>Code should be free from compiler warnings. In general compiler
      flags should be set to generate all warnings. However there are cases
      where avoiding warnings may require additional unnecessary code - in
      exceptional cases insert a comment at the line stating why.</para>
    </section>
  </section>
  <section>
    <title>Source Organization</title>
    <para>The directory hierarchy for OpenACN is already established with each
    protocol having its own directory. Headers are grouped within a single
    <emphasis>include</emphasis> directory.</para>
    <section>
      <title>Naming of Header Files</title>
      <para>In general each protocol has a header file of the same name (e.g.
      rlp.h, sdt.h, dmp.h etc.) which declares the functions and API for that
      protocol.</para>
      <para>Declarations of constants directly related to the ACN specification
      documents go into separate headers named after that document with the
      prefix <quote>acn_</quote>. So for example the reason code <emphasis>Not a
      Property</emphasis> is defined as 2 in the DMP specification and the
      corresponding C definition <code>DMP_REASON_NOT_A_PROP = 2</code> is in
      acn_dmp.h.</para>
    </section>
  </section>
</chapter>